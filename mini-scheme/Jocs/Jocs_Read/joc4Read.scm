;Aquest joc de proves serveix per comprovar que la declaració i ús de funcions són correctament interpretades
;També comprova que les expressions s'avaluin de forma correcta amb els read

;Variables globals
(define suma 0)

;Funcions amb enters
(define (suma-tres a b c)
   (+ a b c))

;Funció amb booleans
(define (tots-certs a b c)
   (and (and a b) c))

;Funció amb strings
(define (concatena str1 str2)
   str1)

;Funció amb llistes
(define (primer llista)
   (car llista))

;Funció que combina if i cond
(define (evalua-nombre n)
   (if (< n 0)
       "negatiu"
       (cond 
           ((= n 0) "zero")
           ((< n 10) "petit")
           ((< n 100) "mitjà")
           (else "gran"))))

;Funció amb let i operacions
(define (sumar-dos-valors x y)
  (let ((val1 x)
        (val2 y))
     (display "La suma és: ")
     (display (+ val1 val2))
     (newline)))

;Main

(define (main)
   (display "Test 1: Funció suma-tres(a,b,c) = a + b + c")
   (newline)
   (display "Introdueix valor per a: ")
   (let ((a (read)))
      (display "Introdueix valor per b: ")
      (let ((b (read)))
         (display "Introdueix valor per c: ")
         (let ((c (read)))
            (display "suma-tres(")
            (display a) (display ",") (display b) (display ",") (display c)
            (display ") = ")
            (display (suma-tres a b c)))))
   (newline)
   (newline)

   (display "Test 2: Funció tots-certs(a,b,c) = a and b and c")
   (newline)
   (display "Introdueix tres booleans (1/0)")
   (newline)
   (display "a: ")
   (let ((a (read)))
      (display "b: ")
      (let ((b (read)))
         (display "c: ")
         (let ((c (read)))
            (display "tots-certs(")
            (display (= a 1)) (display ",") (display (= b 1)) (display ",") (display (= c 1))
            (display ") = ")
            (display (tots-certs (= a 1) (= b 1) (= c 1))))))
   (newline)
   (newline)

   (display "Test 3: Funció concatena(str1,str2) = str1")
   (newline)
   (display "Introdueix primer string: ")
   (let ((str1 (read)))
      (display "Introdueix segon string: ")
      (let ((str2 (read)))
         (display "concatena(")
         (display str1) (display ",") (display str2)
         (display ") = ")
         (display (concatena str1 str2))))
   (newline)
   (newline)

   (display "Test 4: Funció primer(llista)")
   (newline)
   (display "La llista serà (n1 n2 n3)")
   (newline)
   (display "Introdueix n1: ")
   (let ((n1 (read)))
      (display "Introdueix n2: ")
      (let ((n2 (read)))
         (display "Introdueix n3: ")
         (let ((n3 (read)))
            (display "primer((")
            (display n1) (display " ") (display n2) (display " ") (display n3)
            (display ")) = ")
            (display (primer (cons n1 (cons n2 (cons n3 '()))))))))
   (newline)
   (newline)
   
   (display "Test 5: Funció evalua-nombre(n)")
   (newline)
   (display "Avaluarà si el nombre és negatiu/zero/petit/mitjà/gran")
   (newline)
   (display "Introdueix 5 números per avaluar:")
   (newline)
   (display "n1: ")
   (let ((n1 (read)))
      (display "evalua-nombre(") (display n1) (display ") = ")
      (display (evalua-nombre n1))
      (newline)
      (display "n2: ")
      (let ((n2 (read)))
         (display "evalua-nombre(") (display n2) (display ") = ")
         (display (evalua-nombre n2))
         (newline)
         (display "n3: ")
         (let ((n3 (read)))
            (display "evalua-nombre(") (display n3) (display ") = ")
            (display (evalua-nombre n3))
            (newline)
            (display "n4: ")
            (let ((n4 (read)))
               (display "evalua-nombre(") (display n4) (display ") = ")
               (display (evalua-nombre n4))
               (newline)
               (display "n5: ")
               (let ((n5 (read)))
                  (display "evalua-nombre(") (display n5) (display ") = ")
                  (display (evalua-nombre n5)))))))
   (newline)
   (newline)

   (display "Test 6: Funció sumar-dos-valors(x,y)")
   (newline)
   (display "Introdueix x: ")
   (let ((x (read)))
      (display "Introdueix y: ")
      (let ((y (read)))
         (display "sumar-dos-valors(")
         (display x) (display ",") (display y)
         (display ") = ")
         (sumar-dos-valors x y))))
